# Docker Compose for Cloud Deployment
version: '3.8'

services:
  # API Server
  api-server:
    build:
      context: ./apps/api-server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://soilwise:${DB_PASSWORD}@postgres:5432/soilwise
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - AI_SERVICE_URL=http://ai-services:8000
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - mosquitto
    networks:
      - soilwise-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=soilwise
      - POSTGRES_USER=soilwise
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - soilwise-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - soilwise-network
    restart: unless-stopped

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - soilwise-network
    restart: unless-stopped

  # AI Services (Ollama + GPU support)
  ai-services:
    build:
      context: ./packages/ai-services
      dockerfile: Dockerfile.gpu
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ai_models:/root/.ollama
    ports:
      - "11434:11434"
      - "8000:8000"
    networks:
      - soilwise-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Web Dashboard
  web-dashboard:
    build:
      context: ./apps/web-dashboard
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=https://api.soilwise.com
      - VITE_WS_URL=wss://api.soilwise.com
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    networks:
      - soilwise-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - soilwise-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3002:3000"
    networks:
      - soilwise-network
    restart: unless-stopped

  # File Storage (MinIO)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - soilwise-network
    restart: unless-stopped

networks:
  soilwise-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mosquitto_data:
  mosquitto_logs:
  ai_models:
  prometheus_data:
  grafana_data:
  minio_data:
