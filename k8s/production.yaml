# Kubernetes Deployment for Cloud Production

apiVersion: v1
kind: Namespace
metadata:
  name: soilwise
  labels:
    name: soilwise

---
# API Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: soilwise
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server
        image: soilwise/api-server:latest
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: soilwise-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: soilwise-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Server Service
apiVersion: v1
kind: Service
metadata:
  name: api-server-service
  namespace: soilwise
spec:
  selector:
    app: api-server
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: soilwise
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "soilwise"
        - name: POSTGRES_USER
          value: "soilwise"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: soilwise-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: soilwise
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: soilwise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        args: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: soilwise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: soilwise
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
# MQTT Broker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto
  namespace: soilwise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mosquitto
  template:
    metadata:
      labels:
        app: mosquitto
    spec:
      containers:
      - name: mosquitto
        image: eclipse-mosquitto:2.0
        ports:
        - containerPort: 1883
        - containerPort: 9001
        volumeMounts:
        - name: mosquitto-config
          mountPath: /mosquitto/config
        - name: mosquitto-data
          mountPath: /mosquitto/data
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: mosquitto-config
        configMap:
          name: mosquitto-config
      - name: mosquitto-data
        persistentVolumeClaim:
          claimName: mosquitto-pvc

---
# MQTT ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: soilwise
data:
  mosquitto.conf: |
    listener 1883
    listener 9001
    protocol websockets
    allow_anonymous false
    password_file /mosquitto/config/passwd
    persistence true
    persistence_location /mosquitto/data/

---
# MQTT PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mosquitto-pvc
  namespace: soilwise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# MQTT Service
apiVersion: v1
kind: Service
metadata:
  name: mosquitto-service
  namespace: soilwise
spec:
  selector:
    app: mosquitto
  ports:
  - name: mqtt
    protocol: TCP
    port: 1883
    targetPort: 1883
  - name: websocket
    protocol: TCP
    port: 9001
    targetPort: 9001
  type: LoadBalancer

---
# AI Services Deployment (GPU)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-services
  namespace: soilwise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-services
  template:
    metadata:
      labels:
        app: ai-services
    spec:
      containers:
      - name: ai-services
        image: soilwise/ai-services:gpu
        ports:
        - containerPort: 11434
        - containerPort: 8000
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0:11434"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        volumeMounts:
        - name: ai-models
          mountPath: /root/.ollama
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
      volumes:
      - name: ai-models
        persistentVolumeClaim:
          claimName: ai-models-pvc
      nodeSelector:
        accelerator: nvidia-tesla-k80

---
# AI Models PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-models-pvc
  namespace: soilwise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
# AI Services Service
apiVersion: v1
kind: Service
metadata:
  name: ai-services-service
  namespace: soilwise
spec:
  selector:
    app: ai-services
  ports:
  - name: ollama
    protocol: TCP
    port: 11434
    targetPort: 11434
  - name: api
    protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: soilwise-ingress
  namespace: soilwise
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
spec:
  tls:
  - hosts:
    - api.soilwise.com
    - app.soilwise.com
    secretName: soilwise-tls
  rules:
  - host: api.soilwise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-server-service
            port:
              number: 80
  - host: app.soilwise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-dashboard-service
            port:
              number: 80

---
# Secrets (Base64 encoded)
apiVersion: v1
kind: Secret
metadata:
  name: soilwise-secrets
  namespace: soilwise
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL3NvaWx3aXNlOnBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9zb2lsd2lzZQ== # postgresql://soilwise:password@postgres-service:5432/soilwise
  jwt-secret: c3VwZXJzZWNyZXRqd3RrZXlmb3Jzb2lsd2lzZQ== # supersecretjwtkeyforsoilwise
  postgres-password: cGFzc3dvcmQ= # password
